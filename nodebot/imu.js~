																				// Declaring global constants.
const five = require("johnny-five");
const {Board, IMU, Led} = require("johnny-five");
const board = new Board();

const sleep = require("sleep")
// Declaring acceptable metrics for temperature, acceleration and direction.
// The above metrics are, that of the phantom advance 3 drone

// TEMPERATURE REGULATION CONSTANTS.
const operatingTemperatureRangeMinInCelsius = 0;
const operatingTemperatureRangeMaxInCelsius = 30;


// ALTITUDE REGULATION CONSTANTS.
const operatingAltitudeRangeMinInCm = 30;
const operatingAltitudeRangeMaxInCm = 300;
const maximumAngularSpeedPerSecond = 150;
const maximumTiltAngleInDegrees = 35;
const maximumAscentSpeedInMetersPerSecond = 5;
const maximumAltitudeAboveSeaLevelInMeters = 6000;


// DIRECTIONAL REGULATION CONSTANTS.
/*const minControllablePitch = -90;
const maxControllablePitch = 30;*/
const minAssummedControllablePitch = 30;
const maxAssummedControllablePitch = 70;



// Declaring, warning pins for thermoRegulator, accelRegulator, gyroRegulator.
/*const thermoRegulatorWarningLed = new Led(13);
const accelRegulatorWarningLed = new five.Led(12);
const gyroRegulatorWarningLed = new five.Led(11);*/



board.on("ready", () => {
    const imu = new IMU({
        controller: "MPU6050"
    });
    
    
	// Controller: PCF8574A (Generic I2C)
	// Locate the controller chip model number on the chip itself.
  	const lcd = new five.LCD({
   	 controller: "PCF8574T"
  	});

    imu.on("change", () => {
			// Meek Mills
			samplePrint(lcd);    	
    	
        // Printing values.
        printDetails(imu);
		  sleep.sleep(1);
		  
		  // Checking temp regulation.
		  if (imu.thermometer.celsius < operatingTemperatureRangeMinInCelsius || imu.thermometer.celsius > operatingTemperatureRangeMaxInCelsius) {
			console.log("Drone operating out of acceptable temperature range.");
			console.log("Starting thermo regulator");
			thermoRegulator(); 
		  }
		  
		  // Checking gyro regulator.
		  let accel = imu.accelerometer.z;
		  
		  if(accel * 100 < minAssummedControllablePitch || accel * 100 > maxAssummedControllablePitch){
			console.log("Drone exceeding maximum controllable range");
			gyroRegulator();
		  }
		  
		  sleep.sleep(1);
		  
		  
    });

});

// Utility functions.

// Function to turn on warning Leds.
function turnLedOn(led) {
    turnAllLedOff();
    led.on();
}

// Function for turning off all warning Leds
function turnAllLedOff() {
    thermoRegulatorWarningLed.off();
    //accelRegulatorWarningLed.off();
    //gyroRegulatorWarningLed.off();
}

// Function for printing, values from IMU sensor.
function printDetails(imu) {
    console.log("Thermometer");
    console.log("  celsius      : ", imu.thermometer.celsius);
    console.log("  fahrenheit   : ", imu.thermometer.fahrenheit);
    console.log("  kelvin       : ", imu.thermometer.kelvin);
    console.log("--------------------------------------");

    console.log("Accelerometer");
    console.log("  x            : ", imu.accelerometer.x);
    console.log("  y            : ", imu.accelerometer.y);
    console.log("  z            : ", imu.accelerometer.z);
    console.log("  pitch        : ", imu.accelerometer.pitch);
    console.log("  roll         : ", imu.accelerometer.roll);
    console.log("  acceleration : ", imu.accelerometer.acceleration);
    console.log("  inclination  : ", imu.accelerometer.inclination);
    console.log("  orientation  : ", imu.accelerometer.orientation);
    console.log("--------------------------------------");

    console.log("Gyroscope");
    console.log("  x            : ", imu.gyro.x);
    console.log("  y            : ", imu.gyro.y);
    console.log("  z            : ", imu.gyro.z);
    console.log("  pitch        : ", imu.gyro.pitch);
    console.log("  roll         : ", imu.gyro.roll);
    console.log("  yaw          : ", imu.gyro.yaw);
    console.log("  rate         : ", imu.gyro.rate);
    console.log("  isCalibrated : ", imu.gyro.isCalibrated);
    console.log("--------------------------------------");
}

function holdAndClear(x){
	sleep.sleep(x);
	lcd.clear;
}

function samplePrint () {
	lcd.print("Meek Mills");
}

// This function is used, for printing data on the LCD.
function printDetailsOnLCD() {
    lcd.print("Drone Regulator System");
    holdAndClear(5);

    // Printing temperature in Celsius.
    lcd.cursor(0, 0).print("Thermometer"); // The starting position of the LCD display.
    lcd.cursor(0, 1).print("Celsius : ", imu.thermometer.celsius);
    holdAndClear(1);

    // Pause
    lcd.cursor(0, 0).print("Accelerometer");
    lcd.cursor(0, 1).print("X : ", imu.accelerometer.x);
    holdAndClear(1);    

    lcd.cursor(0, 0).print("Accelerometer Y");
    lcd.cursor(0, 1).print("Y : ", imu.accelerometer.y);
    holdAndClear(1);

    lcd.cursor(0, 0).print("Accelerometer Z");
    lcd.cursor(0, 1).print("Z : ", imu.accelerometer.z);
    holdAndClear(1);
    
    lcd.cursor(0, 0).print("Accelerometer Pitch");
    lcd.cursor(0, 1).print("pitch : ", imu.accelerometer.pitch);
    holdAndClear(1);
    
    lcd.cursor(0, 0).print("Accelerometer Roll");
    lcd.cursor(0, 1).print("roll : ", imu.accelerometer.roll);
    holdAndClear(1);
    
    lcd.cursor(0, 0).print("Accelerometer Yaw");
    lcd.cursor(0, 1).print("yaw : ", imu.accelerometer.yaw);
    holdAndClear(1);
    
    lcd.cursor(0, 0).print("Accelerometer Rate");
    lcd.cursor(0, 1).print("rate : ", imu.accelerometer.rate);
    holdAndClear(1);
    
    lcd.cursor(0, 0).print("Accelerometer Calibrated?");
    lcd.cursor(0, 1).print("isCalibrated : ", imu.accelerometer.isCalibrated);
    holdAndClear(1);    
    
	// Printing Gyro Data.
	lcd.cursor(0, 0).print("Gyroscope");
   lcd.cursor(0, 1).print("  x            : ", imu.gyro.x);
   holdAndClear(1);
        
	lcd.cursor(0, 0).print("Gyroscope");
   lcd.cursor(0, 1).print("  y            : ", imu.gyro.y);
   holdAndClear(1);
       
   lcd.cursor(0, 0).print("Gyroscope"); 
   lcd.cursor(0, 1).print("  z            : ", imu.gyro.z);
   holdAndClear(1);
    
	lcd.cursor(0, 0).print("Gyroscope");    
   lcd.cursor(0, 1).print("  pitch        : ", imu.gyro.pitch);
   holdAndClear(1);
    
	lcd.cursor(0, 0).print("Gyroscope");    
   lcd.cursor(0, 1).print("  roll         : ", imu.gyro.roll);
   holdAndClear(1);
    
	lcd.cursor(0, 0).print("Gyroscope");    
   lcd.cursor(0, 1).print("  yaw          : ", imu.gyro.yaw);
   holdAndClear(1);
    
	lcd.cursor(0, 0).print("Gyroscope");    
   lcd.cursor(0, 1).print("  rate         : ", imu.gyro.rate);
   holdAndClear(1);
        
	lcd.cursor(0, 0).print("Gyroscope");
   lcd.cursor(0, 1).print("  isCalibrated : ", imu.gyro.isCalibrated);
   holdAndClear(1);
    
	lcd.cursor(0, 0).print("Gyroscope");    
   lcd.cursor(0, 1).print("--------------------------------------");
   holdAndClear(1);
}


// This function specifies, a set of actions to take.
// When the drone's, temperature is past its normal threshold.
function thermoRegulator() {
	console.log("Temperature regulator started.");
	// turnLedOn(thermoRegulatorWarningLed);
	const led = new Led(13);
	
	led.blink();
}

// This function specifies, a set of actions to take.
// When the drone's, acceleration is not normal.
function accelRegulator() {

}

// This function specifies, a set of action to take.
// When the drone's, direction is not stable
function gyroRegulator() {
	console.log("Gyro regulator started.");
	
	const led = new Led(12);
	
	led.on();
}